# Generated by Django 2.2.24 on 2021-07-07 17:46

from collections import defaultdict
from django.db import migrations


def create_repository_content_for_deprecation(apps, schema_editor):
    """ Create RepositoryContent for AnsibleCollectionDeprecated."""
    AnsibleCollectionDeprecated = apps.get_model('ansible', 'AnsibleCollectionDeprecated')
    RepositoryContent = apps.get_model('core', 'RepositoryContent')
    RepositoryVersion = apps.get_model('core', 'RepositoryVersion')
    RepositoryVersionContentDetails = apps.get_model('core', 'RepositoryVersionContentDetails')
    db_alias = schema_editor.connection.alias
    repo_content = []
    counts_list = []
    count_added = defaultdict(int)
    count_removed = defaultdict(int)
    metadata = defaultdict(dict)

    for d in AnsibleCollectionDeprecated.objects.using(db_alias).all():
        collection_repo = str(d.collection_id) + "_" + str(d.repository_id)
        repo_version = str(d.version_added_number) + "_" + str(d.version_added_id)
        metadata[collection_repo][repo_version] = d.pk

    for collection_repo,repo_version_dict in metadata.items():
        repository_id = collection_repo.split("_")[1]
        repo_versions = sorted([key for key in repo_version_dict.keys()], key=lambda rv: int(rv.split("_")[0]))
        first_repo_version = repo_versions[0]
        version_added_id = first_repo_version.split("_")[1]
        content_id = repo_version_dict[first_repo_version]
        count_added[version_added_id] += 1

        # Find last repo version and verify if it is the latest repo_version
        last_repo_version = repo_versions[-1]
        next_repo_version_number = int(last_repo_version.split("_")[0]) + 1
        latest_repo_version = RepositoryVersion.objects.using(db_alias).filter(
            repository_id=repository_id, number=next_repo_version_number
        ).first()
        if latest_repo_version:
            repo_content.append(RepositoryContent(
                content_id=content_id,
                repository_id=repository_id,
                version_added_id=version_added_id,
                version_removed_id=latest_repo_version.pk,
            ))
            count_removed[latest_repo_version.pk] += 1
        else:
            repo_content.append(RepositoryContent(
                content_id=content_id,
                repository_id=repository_id,
                version_added_id=version_added_id,
            ))

    for repo_version_id, total_added in count_added.items():
        count_obj = RepositoryVersionContentDetails(
            content_type=d.pulp_type,
            repository_version_id=repo_version_id,
            count=total_added,
            count_type="A", # Added
        )
        counts_list.append(count_obj)

        total = total_added - count_removed.get(repo_version_id, 0)
        count_obj = RepositoryVersionContentDetails(
            content_type=d.pulp_type,
            repository_version_id=repo_version_id,
            count=total,
            count_type="P", # Present
        )
        counts_list.append(count_obj)

    for repo_version_id, total_removed in count_removed.items():
        count_obj = RepositoryVersionContentDetails(
            content_type=d.pulp_type,
            repository_version_id=repo_version_id,
            count=total_removed,
            count_type="R", # Removed
        )
        counts_list.append(count_obj)

    RepositoryContent.objects.using(db_alias).bulk_create(repo_content)
    RepositoryVersionContentDetails.objects.using(db_alias).bulk_create(counts_list)
    AnsibleCollectionDeprecated.objects.using(db_alias).filter(version_memberships__isnull=True).delete()


def create_deprecation_from_repository_content(apps, schema_editor):
    """ Create AnsibleCollectionDeprecated from RepositoryContent."""
    AnsibleCollectionDeprecated = apps.get_model('ansible', 'AnsibleCollectionDeprecated')
    Collection = apps.get_model('ansible', 'Collection')
    for deprecation in AnsibleCollectionDeprecated.objects.all():
        col = Collection.objects.get(namespace=deprecation.namespace, name=deprecation.name)
        for repo_content in deprecation.version_memberships.all():
            deprecation.collection_id = col.pk
            deprecation.repository_id = repo_content.repository_id
            deprecation.version_added_id = repo_content.version_added_id
            deprecation.save()


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0068_add_timestamp_of_interest'),
        ('ansible', '0035_deprecation_content'),
    ]

    operations = [
        migrations.RunPython(
            code=create_repository_content_for_deprecation,
            reverse_code=create_deprecation_from_repository_content,
            atomic=True,
        ),
        migrations.AlterUniqueTogether(
            name='ansiblecollectiondeprecated',
            unique_together={('namespace', 'name')},
        ),
        migrations.RemoveField(model_name="ansiblecollectiondeprecated", name="collection_id"),
        migrations.RemoveField(model_name="ansiblecollectiondeprecated", name="repository_id"),
        migrations.RemoveField(model_name="ansiblecollectiondeprecated", name="version_added_id"),
        migrations.RemoveField(model_name="ansiblecollectiondeprecated", name="version_added_number"),
    ]
